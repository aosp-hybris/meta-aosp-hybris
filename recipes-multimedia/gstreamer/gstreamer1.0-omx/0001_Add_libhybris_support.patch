From 808345fa0919e9c968d826b5aa52fc4f1cbfca30 Mon Sep 17 00:00:00 2001
From: Mohammed Sameer <msameer@foolab.org>
Date: Sat, 9 Aug 2014 00:02:23 +0300
Subject: [PATCH 01/11] omx: Add support for libhybris loader

---
 configure.ac          |  8 +++++
 omx/gstomx.c          | 93 ++++++++++++++++++++++++++++++++++++++++++---------
 omx/gstomx.h          | 13 +++++--
 omx/gstomxaudiodec.c  |  5 +--
 omx/gstomxaudioenc.c  |  5 +--
 omx/gstomxaudiosink.c |  5 +--
 omx/gstomxvideodec.c  |  5 +--
 omx/gstomxvideoenc.c  |  5 +--
 8 files changed, 101 insertions(+), 38 deletions(-)

diff --git a/configure.ac b/configure.ac
index e87d240..859bfa2 100644
--- a/configure.ac
+++ b/configure.ac
@@ -257,6 +257,14 @@ elif test x"$ac_cv_omx_target_struct_packing" != x"none"; then
   AC_DEFINE_UNQUOTED(GST_OMX_STRUCT_PACKING, $ac_cv_omx_target_struct_packing, [The struct packing used for OpenMAX structures])
 fi
 
+AC_ARG_ENABLE(hybris,
+              [AC_HELP_STRING([--enable-hybris],
+                              [enable libhybris loader support])],
+              [AC_CHECK_LIB(hybris-common,
+                           android_dlopen, [],
+                           AC_MSG_ERROR([libhybris-common.so not found]))
+              AC_DEFINE(HAVE_HYBRIS, [], [hybris support]) LDFLAGS=-lhybris-common])
+
 dnl *** set variables based on configure arguments ***
 
 dnl set license and copyright notice
diff --git a/omx/gstomx.c b/omx/gstomx.c
index 9a77e5b..84f7742 100644
--- a/omx/gstomx.c
+++ b/omx/gstomx.c
@@ -24,6 +24,10 @@
 #include "config.h"
 #endif
 
+#ifdef HAVE_HYBRIS
+#include <dlfcn.h>
+#endif /* HAVE_HYBRIS */
+
 #include <gst/gst.h>
 #include <string.h>
 
@@ -51,8 +55,14 @@ GST_DEBUG_CATEGORY (gstomx_debug);
 G_LOCK_DEFINE_STATIC (core_handles);
 static GHashTable *core_handles;
 
+#ifdef HAVE_HYBRIS
+void *android_dlopen (const char *filename, int flag);
+void *android_dlsym (void *name, const char *symbol);
+void android_dlclose (void *handle);
+#endif /* HAVE_HYBRIS */
+
 GstOMXCore *
-gst_omx_core_acquire (const gchar * filename)
+gst_omx_core_acquire (const gchar * filename, gboolean use_hybris)
 {
   GstOMXCore *core;
 
@@ -109,7 +119,33 @@ gst_omx_core_acquire (const gchar * filename)
 
       bcm_host_init ();
     }
-
+#ifdef HAVE_HYBRIS
+    if (use_hybris) {
+      core->hybris_module = android_dlopen (filename, RTLD_LAZY);
+      if (!core->hybris_module)
+        goto load_failed;
+
+      core->init = android_dlsym (core->hybris_module, "OMX_Init");
+      if (!core->init)
+        goto symbol_error;
+      core->deinit = android_dlsym (core->hybris_module, "OMX_Deinit");
+      if (!core->deinit)
+        goto symbol_error;
+      core->get_handle = android_dlsym (core->hybris_module, "OMX_GetHandle");
+      if (!core->get_handle)
+        goto symbol_error;
+      core->free_handle = android_dlsym (core->hybris_module, "OMX_FreeHandle");
+      if (!core->free_handle)
+        goto symbol_error;
+      core->setup_tunnel =
+          android_dlsym (core->hybris_module, "OMX_SetupTunnel");
+      if (!core->setup_tunnel)
+        goto symbol_error;
+
+      GST_DEBUG ("Successfully loaded core '%s' using libhybris", filename);
+      goto init;
+    }
+#endif /* HAVE_HYBRIS */
     core->module =
         g_module_open (filename, G_MODULE_BIND_LAZY | G_MODULE_BIND_LOCAL);
     if (!core->module)
@@ -133,6 +169,7 @@ gst_omx_core_acquire (const gchar * filename)
     GST_DEBUG ("Successfully loaded core '%s'", filename);
   }
 
+init:
   g_mutex_lock (&core->lock);
   core->user_count++;
   if (core->user_count == 1) {
@@ -162,7 +199,13 @@ symbol_error:
   {
     GST_ERROR ("Failed to locate required OpenMAX symbol in '%s': %s", filename,
         g_module_error ());
-    g_module_close (core->module);
+
+#ifdef HAVE_HYBRIS
+    if (use_hybris)
+      android_dlclose (core->hybris_module);
+    else
+#endif /* HAVE_HYBRIS */
+      g_module_close (core->module);
     core->module = NULL;
     goto error;
   }
@@ -661,33 +704,37 @@ static OMX_CALLBACKTYPE callbacks =
 
 /* NOTE: Uses comp->lock and comp->messages_lock */
 GstOMXComponent *
-gst_omx_component_new (GstObject * parent, const gchar * core_name,
-    const gchar * component_name, const gchar * component_role, guint64 hacks)
+gst_omx_component_new (GstObject * parent, GstOMXClassData * cdata)
 {
   OMX_ERRORTYPE err;
   GstOMXCore *core;
   GstOMXComponent *comp;
   const gchar *dot;
 
-  core = gst_omx_core_acquire (core_name);
+#ifdef HAVE_HYBRIS
+  core = gst_omx_core_acquire (cdata->core_name, cdata->use_hybris);
+#else
+  core = gst_omx_core_acquire (cdata->core_name, FALSE);
+#endif
+
   if (!core)
     return NULL;
 
   comp = g_slice_new0 (GstOMXComponent);
   comp->core = core;
 
-  if ((dot = g_strrstr (component_name, ".")))
+  if ((dot = g_strrstr (cdata->component_name, ".")))
     comp->name = g_strdup (dot + 1);
   else
-    comp->name = g_strdup (component_name);
+    comp->name = g_strdup (cdata->component_name);
 
   err =
-      core->get_handle (&comp->handle, (OMX_STRING) component_name, comp,
+      core->get_handle (&comp->handle, (OMX_STRING) cdata->component_name, comp,
       &callbacks);
   if (err != OMX_ErrorNone) {
     GST_ERROR_OBJECT (parent,
         "Failed to get component handle '%s' from core '%s': 0x%08x",
-        component_name, core_name, err);
+        cdata->component_name, cdata->core_name, err);
     gst_omx_core_release (core);
     g_free (comp->name);
     g_slice_free (GstOMXComponent, comp);
@@ -695,9 +742,9 @@ gst_omx_component_new (GstObject * parent, const gchar * core_name,
   }
   GST_DEBUG_OBJECT (parent,
       "Successfully got component handle %p (%s) from core '%s'", comp->handle,
-      component_name, core_name);
+      cdata->component_name, cdata->core_name);
   comp->parent = gst_object_ref (parent);
-  comp->hacks = hacks;
+  comp->hacks = cdata->hacks;
 
   comp->ports = g_ptr_array_new ();
   comp->n_in_ports = 0;
@@ -712,18 +759,19 @@ gst_omx_component_new (GstObject * parent, const gchar * core_name,
   comp->last_error = OMX_ErrorNone;
 
   /* Set component role if any */
-  if (component_role && !(hacks & GST_OMX_HACK_NO_COMPONENT_ROLE)) {
+  if (cdata->component_role && !(cdata->hacks & GST_OMX_HACK_NO_COMPONENT_ROLE)) {
     OMX_PARAM_COMPONENTROLETYPE param;
 
     GST_OMX_INIT_STRUCT (&param);
 
-    g_strlcpy ((gchar *) param.cRole, component_role, sizeof (param.cRole));
+    g_strlcpy ((gchar *) param.cRole, cdata->component_role,
+        sizeof (param.cRole));
     err =
         gst_omx_component_set_parameter (comp,
         OMX_IndexParamStandardComponentRole, &param);
 
     GST_DEBUG_OBJECT (parent, "Setting component role to '%s': %s (0x%08x)",
-        component_role, gst_omx_error_to_string (err), err);
+        cdata->component_role, gst_omx_error_to_string (err), err);
 
     /* If setting the role failed this component is unusable */
     if (err != OMX_ErrorNone) {
@@ -2484,7 +2532,7 @@ _class_init (gpointer g_class, gpointer data)
   GKeyFile *config;
   const gchar *element_name = data;
   GError *err;
-  gchar *core_name, *component_name, *component_role;
+  gchar *core_name, *component_name, *component_role, *loader;
   gint in_port_index, out_port_index;
   gchar *template_caps;
   GstPadTemplate *templ;
@@ -2519,6 +2567,19 @@ _class_init (gpointer g_class, gpointer data)
   g_assert (component_name != NULL);
   class_data->component_name = component_name;
 
+#ifdef HAVE_HYBRIS
+  loader = g_key_file_get_string (config, element_name, "loader", NULL);
+  if (loader && !strcmp (loader, "hybris"))
+    class_data->use_hybris = TRUE;
+  else
+    class_data->use_hybris = FALSE;
+
+  if (loader) {
+    g_free (loader);
+    loader = NULL;
+  }
+#endif /* HAVE_HYBRIS */
+
   /* If this fails we simply don't set a role */
   if ((component_role =
           g_key_file_get_string (config, element_name, "component-role",
diff --git a/omx/gstomx.h b/omx/gstomx.h
index 9ad8e2f..6871a35 100644
--- a/omx/gstomx.h
+++ b/omx/gstomx.h
@@ -141,6 +141,11 @@ struct _GstOMXCore {
   /* Handle to the OpenMAX IL core shared library */
   GModule *module;
 
+#ifdef HAVE_HYBRIS
+  /* Handle to the OpenMAX IL core shared library for libhybris loader */
+  void *hybris_module;
+#endif /* HAVE_HYBRIS */
+
   /* Current number of users, transitions from/to 0
    * call init/deinit */
   GMutex lock;
@@ -289,6 +294,10 @@ struct _GstOMXClassData {
   guint64 hacks;
 
   GstOmxComponentType type;
+
+#ifdef HAVE_HYBRIS
+  gboolean use_hybris;
+#endif /* HAVE_HYBRIS */
 };
 
 GKeyFile *        gst_omx_get_configuration (void);
@@ -299,11 +308,11 @@ const gchar *     gst_omx_command_to_string (OMX_COMMANDTYPE cmd);
 
 guint64           gst_omx_parse_hacks (gchar ** hacks);
 
-GstOMXCore *      gst_omx_core_acquire (const gchar * filename);
+GstOMXCore *      gst_omx_core_acquire (const gchar * filename, gboolean use_hybris);
 void              gst_omx_core_release (GstOMXCore * core);
 
 
-GstOMXComponent * gst_omx_component_new (GstObject * parent, const gchar *core_name, const gchar *component_name, const gchar * component_role, guint64 hacks);
+GstOMXComponent * gst_omx_component_new (GstObject * parent, GstOMXClassData * cdata);
 void              gst_omx_component_free (GstOMXComponent * comp);
 
 OMX_ERRORTYPE     gst_omx_component_set_state (GstOMXComponent * comp, OMX_STATETYPE state);
diff --git a/omx/gstomxaudiodec.c b/omx/gstomxaudiodec.c
index f894086..6cd6933 100644
--- a/omx/gstomxaudiodec.c
+++ b/omx/gstomxaudiodec.c
@@ -117,10 +117,7 @@ gst_omx_audio_dec_open (GstAudioDecoder * decoder)
 
   GST_DEBUG_OBJECT (self, "Opening decoder");
 
-  self->dec =
-      gst_omx_component_new (GST_OBJECT_CAST (self), klass->cdata.core_name,
-      klass->cdata.component_name, klass->cdata.component_role,
-      klass->cdata.hacks);
+  self->dec = gst_omx_component_new (GST_OBJECT_CAST (self), &klass->cdata);
   self->started = FALSE;
 
   if (!self->dec)
diff --git a/omx/gstomxaudioenc.c b/omx/gstomxaudioenc.c
index 2557d81..91e892f 100644
--- a/omx/gstomxaudioenc.c
+++ b/omx/gstomxaudioenc.c
@@ -106,10 +106,7 @@ gst_omx_audio_enc_open (GstOMXAudioEnc * self)
   GstOMXAudioEncClass *klass = GST_OMX_AUDIO_ENC_GET_CLASS (self);
   gint in_port_index, out_port_index;
 
-  self->enc =
-      gst_omx_component_new (GST_OBJECT_CAST (self), klass->cdata.core_name,
-      klass->cdata.component_name, klass->cdata.component_role,
-      klass->cdata.hacks);
+  self->enc = gst_omx_component_new (GST_OBJECT_CAST (self), &klass->cdata);
   self->started = FALSE;
 
   if (!self->enc)
diff --git a/omx/gstomxaudiosink.c b/omx/gstomxaudiosink.c
index 1739739..aadb08b 100644
--- a/omx/gstomxaudiosink.c
+++ b/omx/gstomxaudiosink.c
@@ -255,10 +255,7 @@ gst_omx_audio_sink_open (GstAudioSink * audiosink)
 
   GST_DEBUG_OBJECT (self, "Opening audio sink");
 
-  self->comp =
-      gst_omx_component_new (GST_OBJECT_CAST (self), klass->cdata.core_name,
-      klass->cdata.component_name, klass->cdata.component_role,
-      klass->cdata.hacks);
+  self->comp = gst_omx_component_new (GST_OBJECT_CAST (self), &klass->cdata);
 
   if (!self->comp)
     return FALSE;
diff --git a/omx/gstomxvideodec.c b/omx/gstomxvideodec.c
index 8590301..6810b8d 100644
--- a/omx/gstomxvideodec.c
+++ b/omx/gstomxvideodec.c
@@ -152,10 +152,7 @@ gst_omx_video_dec_open (GstVideoDecoder * decoder)
 
   GST_DEBUG_OBJECT (self, "Opening decoder");
 
-  self->dec =
-      gst_omx_component_new (GST_OBJECT_CAST (self), klass->cdata.core_name,
-      klass->cdata.component_name, klass->cdata.component_role,
-      klass->cdata.hacks);
+  self->dec = gst_omx_component_new (GST_OBJECT_CAST (self), &klass->cdata);
   self->started = FALSE;
 
   if (!self->dec)
diff --git a/omx/gstomxvideoenc.c b/omx/gstomxvideoenc.c
index 0f64a02..31d2dde 100644
--- a/omx/gstomxvideoenc.c
+++ b/omx/gstomxvideoenc.c
@@ -209,10 +209,7 @@ gst_omx_video_enc_open (GstVideoEncoder * encoder)
   GstOMXVideoEncClass *klass = GST_OMX_VIDEO_ENC_GET_CLASS (self);
   gint in_port_index, out_port_index;
 
-  self->enc =
-      gst_omx_component_new (GST_OBJECT_CAST (self), klass->cdata.core_name,
-      klass->cdata.component_name, klass->cdata.component_role,
-      klass->cdata.hacks);
+  self->enc = gst_omx_component_new (GST_OBJECT_CAST (self), &klass->cdata);
   self->started = FALSE;
 
   if (!self->enc)
-- 
2.0.0

